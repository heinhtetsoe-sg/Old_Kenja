// kanji=漢字
/*
 * $Id: NullConnection.java 74557 2020-05-27 05:13:43Z maeshiro $
 *
 * 作成日: 2006/01/16 16:35:49 - JST
 * 作成者: tamura
 *
 * Copyright(C) 2004-2006 ALP Okinawa Co.,Ltd. All rights reserved.
 */
package jp.co.alp.kenja.common.dao.test;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class NullConnection implements Connection {
    public Statement createStatement() throws SQLException {
        return null;
    }
    public PreparedStatement prepareStatement(final String sql) throws SQLException {
        return null;
    }
    public CallableStatement prepareCall(final String sql) throws SQLException {
        return null;
    }
    public String nativeSQL(final String sql) throws SQLException {
        return null;
    }
    public void setAutoCommit(final boolean autoCommit) throws SQLException {}
    public boolean getAutoCommit() throws SQLException {
        return false;
    }
    public void commit() throws SQLException {}
    public void rollback() throws SQLException {}
    public void close() throws SQLException {}
    public boolean isClosed() throws SQLException {
        return false;
    }
    public DatabaseMetaData getMetaData() throws SQLException {
        return null;
    }
    public void setReadOnly(final boolean readOnly) throws SQLException {}
    public boolean isReadOnly() throws SQLException {
        return false;
    }
    public void setCatalog(final String catalog) throws SQLException {}
    public String getCatalog() throws SQLException {
        return null;
    }
    public void setTransactionIsolation(final int level) throws SQLException {}
    public int getTransactionIsolation() throws SQLException {
        return 0;
    }
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }
    public void clearWarnings() throws SQLException {}
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return null;
    }
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return null;
    }
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return null;
    }
    public Map getTypeMap() throws SQLException {
        return null;
    }
    public void setTypeMap(final Map map) throws SQLException {}
    public Object unwrap(Class iface) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public boolean isWrapperFor(Class iface) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return false;
    }
    public void setHoldability(int holdability) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ

    }
    public int getHoldability() throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return 0;
    }
    public Savepoint setSavepoint() throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public Savepoint setSavepoint(String name) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public void rollback(Savepoint savepoint) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ

    }
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ

    }
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public Clob createClob() throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public Blob createBlob() throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public NClob createNClob() throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public SQLXML createSQLXML() throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public boolean isValid(int timeout) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return false;
    }
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        // TODO 自動生成されたメソッド・スタブ

    }
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        // TODO 自動生成されたメソッド・スタブ

    }
    public String getClientInfo(String name) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public Properties getClientInfo() throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }
} // NullConnection

// eof
