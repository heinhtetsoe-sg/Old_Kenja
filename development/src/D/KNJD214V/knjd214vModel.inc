<?php

require_once('for_php7.php');

/**
 * 定数定義
*/

class knjd214vModel extends Model
{
    public $field      = array();
    public $cmd;
    public $control;   //コントロールマスタ
    public $staffcd;   //職員コード
    public $testTable;
    public $selectdata;
    public $calcMethod;
    public $del_check = array();

    /**
     * メンバ変数の初期化
     */
    public function knjd214vModel()
    {
        //コントロールマスタより情報を取得
        common::GetControlMaster_Fnc($this->control);
        $this->control["学籍処理日"] = str_replace("-", "/", $this->control["学籍処理日"]);
        $this->staffcd      = STAFFCD;                  //職員コード
    }
    public function init()
    {
        $this->field = array("COPY_SAKI_CD"     =>  "9990009",                      //コピー先(学年評定)
                             "KARI_DIV"         =>  VARS::post("KARI_DIV"),         //仮評定フラグ
                             "KARI_TESTCD"      =>  VARS::post("KARI_TESTCD"),      //保存先(仮評定)
                             "SEMESTER"         =>  VARS::post("SEMESTER"),         //学期
                             "GRADE"            =>  VARS::post("GRADE"),            //学年
                             "SOUGAKU"          =>  VARS::post("SOUGAKU"),          //総学等も含む
                             "CONVERT"          =>  VARS::post("CONVERT"),          //評定換算する
                             "KEEKA_OVER"       =>  VARS::post("KEEKA_OVER"),       //欠課時数オーバーは未履修にする
                             "SIDOU"            =>  VARS::post("SIDOU"),            //追指導は参照する
                             "TESTKINDCD"       =>  VARS::post("TESTKINDCD"),       //テスト
                             "SUBCLASS_REMARK0" =>  VARS::post("SUBCLASS_REMARK0"), //対象科目(通年)
                             "SUBCLASS_REMARK1" =>  VARS::post("SUBCLASS_REMARK1"), //対象科目(1学期)
                             "SUBCLASS_REMARK2" =>  VARS::post("SUBCLASS_REMARK2"), //対象科目(2学期)
                             "SUBCLASS_REMARK3" =>  VARS::post("SUBCLASS_REMARK3"), //対象科目(3学期)
                             "SHORI"            =>  VARS::post("SHORI")             //クリア処理とコピー処理のラジオ
                     );
        $this->selectdata = VARS::post("selectdata");

        $this->cmd         = VARS::request("cmd");

        //プロパティファイル
        $this->getPropertiesAll();
        if ($this->Properties["use_prg_schoolkind"] == "1") {
            $this->getSelectSchoolKind();
        }
        //初期値の設定
        $this->testTable = (strlen($this->Properties["useTestCountflg"])) ? $this->Properties["useTestCountflg"] : "TESTITEM_MST_COUNTFLG_NEW";
        //学期評価・学年評価を算出
        //評価の算出方法(1:四捨五入 2:切り上げ 3:切り捨て)
        $rtnRow = knjd214vQuery::getCalcMethod();
        $this->calcMethod = $rtnRow["SCHOOL_REMARK1"];

        //実行履歴データ削除
        $this->del_check = array();
        $this->del_check = VARS::post("DEL_CHECK");
    }

    public function validateInput()
    {
        $db = Query::dbCheckOut();
        //NULLではないデータが１件でもあれば、エラーメッセージを表示。
        $query  = knjd214vQuery::getClearExists($this, CTRL_YEAR);
        $dataCnt = $db->getOne($query);
        if (0 < $dataCnt) {
            $this->setWarning("MSG306", "クリア処理が行われていません。");
            return false;
        }
        if ($this->field["KARI_TESTCD"] == $this->field["TESTKINDCD"]) {
            $this->setWarning("MSG300", "(コピー元になる評価)と(保存先になる仮評定)が同じです。");
            return false;
        }
        //事前設定チェック
        if ($this->Properties["useAssessAvgMst"] == "1") {
            $assessCnt1 = $db->getOne(knjd214vQuery::getCntAssessAvgMst($this));
            $assessCnt2 = $db->getOne(knjd214vQuery::getCntAssessAvgCalcMst($this));
            if (0 == $assessCnt1 || 0 == $assessCnt2) {
                $this->setWarning("MSG306", "事前設定が行われていません。平均点別評定マスタまたは平均点算出設定マスタを設定して下さい。");
                return false;
            }
        }
        Query::dbCheckIn($db);

        return true;
    }

    public function &getCopyModel()
    {
        if ($this->validateInput()) {
            knjd214vQuery::executeRireki($this);
            knjd214vQuery::getCopyQuery($this);
            knjd214vQuery::getCombinedCopyQuery($this);
            //保存先(仮評定)
            if (strlen($this->field["KARI_TESTCD"])) {
                knjd214vQuery::getProvCopyQuery($this);
            }
            $this->setMessage("MSG201");
        }
    }

    public function &getClearModel()
    {
        knjd214vQuery::executeRireki($this);
        knjd214vQuery::getClearQuery($this);
        $this->setMessage("MSG201");
    }

    public function &getDeleteRirekiModel()
    {
        if (get_count($this->del_check)) {
            knjd214vQuery::deleteRireki($this);
            $this->setMessage("MSG201");
        }
    }
}
